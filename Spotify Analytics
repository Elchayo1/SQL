/*For this project, I downloaded Spotify data from Kaggle. 
Then I created a table to insert Spotify data into.
Finally, I performed analytics on the data using SQL.*/

--TOP 50 SONGS IN 2021--
/*Creating the Table*/

CREATE TABLE BIT_DB.Spotifydata (
    id integer PRIMARY KEY,
    artist_name varchar NOT NULL,
    track_name varchar NOT NULL,
    track_id varchar NOT NULL,
    popularity integer NOT NULL,
    danceability decimal(4,3) NOT NULL,
    energy decimal(4,3) NOT NULL,
    song_key integer NOT NULL,
    loudness decimal(5,3) NOT NULL,
    song_mode integer NOT NULL,
    speechiness decimal(5,4) NOT NULL,
    acousticness decimal(6,5) NOT NULL,
    instrumentalness text NOT NULL,
    liveness decimal(5,4) NOT NULL,
    valence decimal(4,3) NOT NULL,
    tempo decimal(6,3) NOT NULL,
    duration_ms integer NOT NULL,
    time_signature integer NOT NULL 
);

/*What is the average danceability by artist and track?*/

SELECT artist_name, track_name, avg(danceability)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

/*Who are the top 10 artists based on their most popular song?*/

SELECT artist_name, MAX(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

/*What artist released the longest song and how long is it in MINUTES?*/

SELECT artist_name, track_name, ROUND(duration_ms/60000.00, 2) as Minutes
FROM BIT_DB.Spotifydata
ORDER BY Minutes DESC
LIMIT 1;

/*What artist(s) landed the most songs in this list?*/

SELECT COUNT(*) AS score FROM BIT_DB.Spotifydata
GROUP BY artist_name;

  SELECT MAX(score) FROM (SELECT COUNT(*) AS score FROM BIT_DB.Spotifydata
  GROUP BY artist_name);

    SELECT artist_name, COUNT(artist_name) as Score
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name
    HAVING score >= (SELECT MAX(score) FROM (SELECT COUNT(*) AS score FROM BIT_DB.Spotifydata
    GROUP BY artist_name))
    ORDER BY Score DESC;

/*How long would it take to listen to every song on the list in Minutes?*/

SELECT SUM(duration_ms) as "total_ms"
FROM BIT_DB.Spotifydata;

  SELECT ROUND(total_ms/60000.00, 2) as "total_mins" FROM (SELECT SUM(duration_ms) as "total_ms"
  FROM BIT_DB.Spotifydata);

/*How long would it take to listen to every song on the list in Hours?*/

SELECT ROUND(total_mins/60.00, 2) as "total_hours" FROM (SELECT ROUND(total_ms/60000.00, 2) as "total_mins" FROM (SELECT SUM(duration_ms) as "total_ms"
FROM BIT_DB.Spotifydata));

/*Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”*/

--Using CTE--
WITH popularity_CTE AS 
(SELECT s.artist_name, AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name)
 
  SELECT artist_name, average_popularity, 'Top Star'
  FROM popularity_CTE
  WHERE average_popularity>=90;

--Using HAVING--
SELECT artist_name, AVG(popularity) as Average_popularity, 'Top Star'
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING Average_popularity >= 90;

/*List the tempo of each song, the average tempo by artist, and a label with tempo speed as "Fast", "Medium", or "Slow". */

--Using OVER PARTITION and CASE--
SELECT artist_name, AVG(tempo) OVER (PARTITION BY artist_name) as "Average_tempo",
CASE
    WHEN AVG(tempo) OVER (PARTITION BY artist_name) > 160 THEN "Fast"
    WHEN AVG(tempo) OVER (PARTITION BY artist_name) < 100 THEN "Slow"
    ELSE "Midium"
END as Artist_Avg_Tempo,
track_name, Tempo
FROM BIT_DB.Spotifydata
ORDER BY AVG(tempo) OVER (PARTITION BY artist_name) DESC;

/* Data obtained from: https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv */

